"""
Vulnerability Report Parser

This script reads a text-based vulnerability scan report and parses it
into a structured list of Finding objects for the Triage Agent to process.
"""

import re
import logging
from typing import List
from scout_agent.shared_types import Finding

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ReportParser:
    """
    Parses the new, detailed text report format generated by the advanced VulnerabilityScanner.
    """

    def parse(self, report_path: str) -> List[Finding]:
        """
        Parses the vulnerability report file and returns a list of Finding objects.
        """
        try:
            with open(report_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except FileNotFoundError:
            logger.error(f"Report file not found at: {report_path}")
            return []

        findings = []
        # Split the report into individual finding blocks
        finding_blocks = re.split(r'# Finding \d+', content)
        
        # The first split part is the header, so we skip it
        for block in finding_blocks[1:]:
            finding = self._parse_block(block)
            if finding:
                findings.append(finding)
        
        logger.info(f"Parsed {len(findings)} findings from the report.")
        return findings

    def _parse_block(self, block: str) -> Finding:
        """
        Parses a single finding block from the report.
        """
        try:
            finding_id = self._extract_field(block, "ID")
            vuln_type = self._extract_field(block, "Type")
            severity = self._extract_field(block, "Severity")
            file_path = self._extract_field(block, "File")
            line_str = self._extract_field(block, "Line")
            line_number = int(line_str) if line_str else 0
            description = self._extract_field(block, "Description")
            evidence = self._extract_field(block, "Evidence")

            return Finding(
                id=finding_id,
                type=vuln_type.upper().replace(' ', '_'),
                severity=severity,
                file_path=f"./{file_path}", # Ensure it's a relative path
                line_number=line_number,
                message=description,
                evidence=evidence
            )
        except (ValueError, AttributeError) as e:
            logger.warning(f"Could not parse a finding block: {e}\nBlock content: {block[:200]}...")
            return None

    def _extract_field(self, block: str, field_name: str) -> str:
        """Extracts a simple key-value field from a block."""
        match = re.search(rf"{field_name}:\s*(.*)", block)
        if match:
            return match.group(1).strip()
        return ""
