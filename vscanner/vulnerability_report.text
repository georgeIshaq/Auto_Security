================================================================================
VULNERABILITY SCAN REPORT
================================================================================
Scan ID: scan_1758314045
Target: .
Timestamp: 2025-09-19T13:34:05.081026
Duration: 3.49 seconds
Total Findings: 19

SUMMARY BY SEVERITY:
----------------------------------------
  CRITICAL:  18 findings
      HIGH:   1 findings

DETAILED FINDINGS:
----------------------------------------

1. COMMAND_INJECTION - CRITICAL
   File: ./vulnerability_scanner.py:78
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: eval(
   Code:
                         r'dangerouslySetInnerHTML',  # React XSS
                         r'innerHTML\s*=',  # Direct innerHTML assignment
                         r'document\.write\s*\(',  # document.write usage
                         r'eval\s*\(',  # eval() usage
                     ],
                     'command_injection': [
                         r'exec\s*\(',  # exec() usage

2. COMMAND_INJECTION - CRITICAL
   File: ./vulnerability_scanner.py:115
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: eval(
   Code:
                     'command_injection': [
                         r'os\.system\s*\(',  # os.system usage
                         r'subprocess\.call\s*\(.*shell\s*=\s*True',  # subprocess with shell
                         r'eval\s*\(',  # eval() usage
                         r'exec\s*\(',  # exec() usage
                     ],
                     'path_traversal': [

3. COMMAND_INJECTION - CRITICAL
   File: ./vulnerability_scanner.py:81
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
                         r'eval\s*\(',  # eval() usage
                     ],
                     'command_injection': [
                         r'exec\s*\(',  # exec() usage
                         r'spawn\s*\(',  # spawn with user input
                         r'execSync\s*\(',  # execSync usage
                         r'shell\s*:\s*true',  # shell: true in child_process

4. COMMAND_INJECTION - CRITICAL
   File: ./vulnerability_scanner.py:116
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
                         r'os\.system\s*\(',  # os.system usage
                         r'subprocess\.call\s*\(.*shell\s*=\s*True',  # subprocess with shell
                         r'eval\s*\(',  # eval() usage
                         r'exec\s*\(',  # exec() usage
                     ],
                     'path_traversal': [
                         r'open\s*\(.*input',  # File open with user input

5. COMMAND_INJECTION - CRITICAL
   File: ./test_scanner.py:53
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
     // Command injection vulnerability
     app.get('/ping', (req, res) => {
       const host = req.query.host;
       exec(`ping -c 1 ${host}`, (error, stdout, stderr) => {
         res.json({output: stdout, error: stderr});
       });
     });

6. HARDCODED_SECRETS - CRITICAL
   File: ./test_scanner.py:59
   Confidence: 0.98
   Description: Hardcoded secrets detected - sensitive credentials stored in source code
   Evidence: SECRET = 'my-super-secret-key-12345'
   Code:
     });
     
     // Hardcoded secret
     const JWT_SECRET = 'my-super-secret-key-12345';
     
     // Weak password comparison
     app.post('/login', (req, res) => {

7. COMMAND_INJECTION - CRITICAL
   File: ./demo_scanner.py:213
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
     // Before (vulnerable)
     app.get('/ping', (req, res) => {
       const host = req.query.host;
       exec(`ping -c 1 ${host}`, (error, stdout, stderr) => {
         res.json({output: stdout, error: stderr});
       });
     });

8. COMMAND_INJECTION - CRITICAL
   File: ./example_usage.py:56
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
     // Command injection vulnerability  
     app.get('/ping', (req, res) => {
       const host = req.query.host;
       exec(`ping -c 1 ${host}`, (error, stdout, stderr) => {
         res.json({output: stdout, error: stderr});
       });
     });

9. COMMAND_INJECTION - CRITICAL
   File: ./example_usage.py:142
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
     
     app.get('/ping', (req, res) => {
       const host = req.query.host;
       exec(`ping -c 1 ${host}`, (error, stdout, stderr) => {
         res.json({output: stdout, error: stderr});
       });
     });

10. HARDCODED_SECRETS - CRITICAL
   File: ./example_usage.py:62
   Confidence: 0.98
   Description: Hardcoded secrets detected - sensitive credentials stored in source code
   Evidence: SECRET = 'my-super-secret-key-12345'
   Code:
     });
     
     // Hardcoded secret
     const JWT_SECRET = 'my-super-secret-key-12345';
     """
         
         # Initialize scanner

11. COMMAND_INJECTION - CRITICAL
   File: ./simple_test.py:283
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: os.system(
   Code:
     
     # Command injection
     def ping_host(host):
         os.system(f'ping -c 1 {host}')
     
     # SQL injection
     def get_user(user_id):

12. COMMAND_INJECTION - CRITICAL
   File: ./simple_test.py:51
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: eval(
   Code:
                         r'dangerouslySetInnerHTML',  # React XSS
                         r'innerHTML\s*=',  # Direct innerHTML assignment
                         r'document\.write\s*\(',  # document.write usage
                         r'eval\s*\(',  # eval() usage
                     ],
                     'command_injection': [
                         r'exec\s*\(',  # exec() usage

13. COMMAND_INJECTION - CRITICAL
   File: ./simple_test.py:88
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: eval(
   Code:
                     'command_injection': [
                         r'os\.system\s*\(',  # os.system usage
                         r'subprocess\.call\s*\(.*shell\s*=\s*True',  # subprocess with shell
                         r'eval\s*\(',  # eval() usage
                         r'exec\s*\(',  # exec() usage
                     ],
                     'path_traversal': [

14. COMMAND_INJECTION - CRITICAL
   File: ./simple_test.py:54
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
                         r'eval\s*\(',  # eval() usage
                     ],
                     'command_injection': [
                         r'exec\s*\(',  # exec() usage
                         r'spawn\s*\(',  # spawn with user input
                         r'execSync\s*\(',  # execSync usage
                         r'shell\s*:\s*true',  # shell: true in child_process

15. COMMAND_INJECTION - CRITICAL
   File: ./simple_test.py:89
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
                         r'os\.system\s*\(',  # os.system usage
                         r'subprocess\.call\s*\(.*shell\s*=\s*True',  # subprocess with shell
                         r'eval\s*\(',  # eval() usage
                         r'exec\s*\(',  # exec() usage
                     ],
                     'path_traversal': [
                         r'open\s*\(.*input',  # File open with user input

16. COMMAND_INJECTION - CRITICAL
   File: ./simple_test.py:235
   Confidence: 0.95
   Description: Command Injection vulnerability detected - user input passed to system commands
   Evidence: exec(
   Code:
     // Command injection vulnerability
     app.get('/ping', (req, res) => {
       const host = req.query.host;
       exec(\`ping -c 1 \${host}\`, (error, stdout, stderr) => {
         res.json({output: stdout, error: stderr});
       });
     });

17. HARDCODED_SECRETS - CRITICAL
   File: ./simple_test.py:295
   Confidence: 0.98
   Description: Hardcoded secrets detected - sensitive credentials stored in source code
   Evidence: API_KEY = 'sk-1234567890abcdef'
   Code:
         return pickle.loads(data)
     
     # Hardcoded secret
     API_KEY = 'sk-1234567890abcdef'
     """
         
         print("Testing Python vulnerabilities...")

18. HARDCODED_SECRETS - CRITICAL
   File: ./simple_test.py:241
   Confidence: 0.98
   Description: Hardcoded secrets detected - sensitive credentials stored in source code
   Evidence: SECRET = 'my-super-secret-key-12345'
   Code:
     });
     
     // Hardcoded secret
     const JWT_SECRET = 'my-super-secret-key-12345';
     
     // Weak password comparison
     app.post('/login', (req, res) => {

19. DESERIALIZATION - HIGH
   File: ./simple_test.py:292
   Confidence: 0.90
   Description: Unsafe deserialization detected - potential for arbitrary code execution
   Evidence: pickle.loads(
   Code:
     
     # Deserialization
     def load_data(data):
         return pickle.loads(data)
     
     # Hardcoded secret
     API_KEY = 'sk-1234567890abcdef'